#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <curl/curl.h>
#include <regex.h>

#define URL "https://www.amazon.com/s?k=laptop+deals"  // Страница с акциями
#define OUTPUT_FILE "discounts.csv"

// Структура для хранения загруженных данных
struct Memory {
    char *response;
    size_t size;
};

// Функция обратного вызова для записи данных от curl
size_t write_callback(void *data, size_t size, size_t nmemb, void *clientp) {
    size_t total_size = size * nmemb;
    struct Memory *mem = (struct Memory *)clientp;

    char *ptr = realloc(mem->response, mem->size + total_size + 1);
    if (ptr == NULL) {
        printf("Ошибка выделения памяти\n");
        return 0;
    }

    mem->response = ptr;
    memcpy(&(mem->response[mem->size]), data, total_size);
    mem->size += total_size;
    mem->response[mem->size] = 0;

    return total_size;
}

// Функция загрузки HTML-страницы
char *fetch_page(const char *url) {
    CURL *curl = curl_easy_init();
    if (!curl) {
        fprintf(stderr, "Ошибка инициализации curl\n");
        return NULL;
    }

    struct Memory chunk = { .response = malloc(1), .size = 0 };

    curl_easy_setopt(curl, CURLOPT_URL, url);
    curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_callback);
    curl_easy_setopt(curl, CURLOPT_WRITEDATA, &chunk);
    curl_easy_setopt(curl, CURLOPT_USERAGENT, "Mozilla/5.0");

    CURLcode res = curl_easy_perform(curl);
    if (res != CURLE_OK) {
        fprintf(stderr, "Ошибка загрузки страницы: %s\n", curl_easy_strerror(res));
        free(chunk.response);
        curl_easy_cleanup(curl);
        return NULL;
    }

    curl_easy_cleanup(curl);
    return chunk.response;
}

// Функция поиска скидок в HTML через регулярные выражения
void extract_discounts(const char *html) {
    regex_t regex_price, regex_old_price;
    regmatch_t matches[2];

    // Регулярка для текущей цены (пример: "$499.99")
    const char *pattern_price = "\\$([0-9]+\\.[0-9]+)";
    
    // Регулярка для старой цены (пример: "<span class=\"strike\">$699.99</span>")
    const char *pattern_old_price = "<span[^>]*>\\$([0-9]+\\.[0-9]+)</span>";

    if (regcomp(&regex_price, pattern_price, REG_EXTENDED) != 0 ||
        regcomp(&regex_old_price, pattern_old_price, REG_EXTENDED) != 0) {
        fprintf(stderr, "Ошибка компиляции регулярного выражения\n");
        return;
    }

    FILE *file = fopen(OUTPUT_FILE, "w");
    if (!file) {
        fprintf(stderr, "Ошибка создания файла %s\n", OUTPUT_FILE);
        return;
    }
    fprintf(file, "Текущая цена,Старая цена,Скидка (%)\n");

    const char *cursor = html;
    while (regexec(&regex_price, cursor, 2, matches, 0) == 0) {
        char current_price[16] = {0};
        int len = matches[1].rm_eo - matches[1].rm_so;
        strncpy(current_price, cursor + matches[1].rm_so, len);
        current_price[len] = '\0';

        cursor += matches[1].rm_eo;  // Двигаемся дальше по HTML

        // Проверяем наличие старой цены
        if (regexec(&regex_old_price, cursor, 2, matches, 0) == 0) {
            char old_price[16] = {0};
            len = matches[1].rm_eo - matches[1].rm_so;
            strncpy(old_price, cursor + matches[1].rm_so, len);
            old_price[len] = '\0';

            double old_p = atof(old_price);
            double new_p = atof(current_price);
            double discount = ((old_p - new_p) / old_p) * 100.0;

            printf("Цена: $%s (Старая цена: $%s, Скидка: %.2f%%)\n", current_price, old_price, discount);
            fprintf(file, "%s,%s,%.2f\n", current_price, old_price, discount);
        } else {
            printf("Цена: $%s (без скидки)\n", current_price);
            fprintf(file, "%s,,\n", current_price);
        }
    }

    fclose(file);
    regfree(&regex_price);
    regfree(&regex_old_price);
}

int main() {
    printf("Загружаем страницу %s...\n", URL);
    char *html = fetch_page(URL);
    if (!html) {
        fprintf(stderr, "Не удалось загрузить страницу\n");
        return 1;
    }

    printf("Анализируем скидки...\n");
    extract_discounts(html);

    free(html);
    printf("Результаты сохранены в %s\n", OUTPUT_FILE);
    return 0;
}
